from aiogram import Router, types
from aiogram.filters import Command

from ..config import settings
from ..services.family import add_family_member, get_family_ids, remove_family_member

router = Router()


def _is_admin(user_id: int | None) -> bool:
    return bool(user_id and user_id in settings.ADMIN_IDS)


@router.message(Command("family_list"))
async def family_list(message: types.Message) -> None:
    if not _is_admin(message.from_user and message.from_user.id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    ids = get_family_ids()
    if ids:
        body = "\n".join(f"‚Ä¢ <code>{value}</code>" for value in ids)
        text = "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ —Å–µ–º—å–∏:\n" + body
    else:
        text = "–°–ø–∏—Å–æ–∫ —Å–µ–º—å–∏ –ø—É—Å—Ç."
    await message.answer(text)


@router.message(Command("family_add"))
async def family_add(message: types.Message) -> None:
    if not _is_admin(message.from_user and message.from_user.id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /family_add <telegram_id>")
        return
    try:
        new_id = int(parts[1])
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if not add_family_member(new_id):
        await message.answer("–≠—Ç–æ—Ç ID —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Å–µ–º—å–∏.")
        return
    ids = get_family_ids()
    body = "\n".join(f"‚Ä¢ <code>{value}</code>" for value in ids)
    await message.answer("–ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n" + body)


@router.message(Command("family_remove"))
async def family_remove(message: types.Message) -> None:
    if not _is_admin(message.from_user and message.from_user.id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /family_remove <telegram_id>")
        return
    try:
        target = int(parts[1])
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if not remove_family_member(target):
        await message.answer("–¢–∞–∫–æ–≥–æ ID –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Å–µ–º—å–∏.")
        return
    ids = get_family_ids()
    if ids:
        body = "\n".join(f"‚Ä¢ <code>{value}</code>" for value in ids)
        await message.answer("–£–¥–∞–ª–µ–Ω–æ. –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n" + body)
    else:
        await message.answer("–£–¥–∞–ª–µ–Ω–æ. –°–ø–∏—Å–æ–∫ —Å–µ–º—å–∏ –ø—É—Å—Ç.")
