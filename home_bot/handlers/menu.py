"""Inline menu with quick actions."""

from __future__ import annotations

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from ..config import settings
from ..menu import build_menu_keyboard
from ..utils.telegram import answer_safe
from . import score, tasks

router = Router()


def build_inline_menu_keyboard(user: types.User | None) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="menu:tasks")],
        [InlineKeyboardButton(text="üèÜ –ë–∞–ª–∞–Ω—Å", callback_data="menu:score")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="menu:history")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="menu:help")],
    ]
    if user and user.id in settings.ADMIN_IDS:
        buttons.append([InlineKeyboardButton(text="‚öôÔ∏è AI –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu:ai")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def render_menu_view(action: str, user: types.User | None) -> str:
    if action == "tasks":
        return tasks.build_tasks_overview()
    if action == "score" and user:
        return score.build_balance_text(user.id)
    if action == "history" and user:
        return score.build_history_text(user.id)
    if action == "help":
        cmds = [
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ</b>",
            "/tasks ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
            "/me ‚Äî –º–æ–∏ –±–∞–ª–ª—ã",
            "/history ‚Äî –∏—Å—Ç–æ—Ä–∏—è",
            "/myid ‚Äî –º–æ–π Telegram ID",
            "/selftest ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            "/ai_test ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ AI-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞",
            "<b>–ê–¥–º–∏–Ω—ã</b>",
            "/family_list /family_add /family_remove",
            "/regen_today ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏",
            "/debug_jobs ‚Äî —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞",
            "/ai_stats ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π",
            "/ai_config ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ AI",
        ]
        return "‚öôÔ∏è –ü–æ–º–æ—â—å:\n" + "\n".join(cmds)
    if action == "ai" and user and user.id in settings.ADMIN_IDS:
        return (
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI:\n"
            "‚Ä¢ /ai_stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã\n"
            "‚Ä¢ /ai_config penalty=0.1 bonus=0.05 ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
        )
    greeting = [
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞.",
        "–í—ã–±–∏—Ä–∞–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏, –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é.",
    ]
    if user and user.id in settings.ADMIN_IDS:
        greeting.append("–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–º—å—ë–π –∏ AI.")
    return "\n\n".join(greeting)


@router.message(Command("menu"))
async def show_menu(message: types.Message) -> None:
    await answer_safe(
        message,
        await render_menu_view("home", message.from_user),
        reply_markup=build_inline_menu_keyboard(message.from_user),
    )


@router.callback_query(F.data.startswith("menu:"))
async def handle_menu_callback(callback: types.CallbackQuery) -> None:
    if callback.message is None:
        await callback.answer()
        return
    _, _, action = callback.data.partition(":")
    text = await render_menu_view(action or "home", callback.from_user)
    await callback.message.edit_text(
        text,
        reply_markup=build_inline_menu_keyboard(callback.from_user),
    )
    await callback.answer()
@router.message(F.text == "üìä –ë–∞–ª–∞–Ω—Å")
async def show_balance_shortcut(message: types.Message) -> None:
    if message.from_user is None:
        return
    text = await render_menu_view("score", message.from_user)
    await answer_safe(message, text, reply_markup=build_menu_keyboard(message.from_user))


@router.message(F.text == "üìù –ó–∞–¥–∞—á–∏")
async def show_tasks_shortcut(message: types.Message) -> None:
    text = await render_menu_view("tasks", message.from_user)
    await answer_safe(message, text, reply_markup=build_menu_keyboard(message.from_user))


@router.message(F.text == "üìÖ –ò—Å—Ç–æ—Ä–∏—è")
async def show_history_shortcut(message: types.Message) -> None:
    if message.from_user is None:
        return
    text = await render_menu_view("history", message.from_user)
    await answer_safe(message, text, reply_markup=build_menu_keyboard(message.from_user))


@router.message(F.text == "üõ† –ê–¥–º–∏–Ω")
async def show_admin_shortcut(message: types.Message) -> None:
    if message.from_user is None or message.from_user.id not in settings.ADMIN_IDS:
        await answer_safe(message, "–†–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    text = await render_menu_view("help", message.from_user)
    await answer_safe(message, text, reply_markup=build_menu_keyboard(message.from_user))
