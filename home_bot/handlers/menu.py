"""Inline menu with quick actions."""

from __future__ import annotations

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..config import settings
from ..services.ai_advisor import AIAdvisor
from . import score, tasks

router = Router()

_MENU_BUTTONS: list[tuple[str, str]] = [
    ("üìã –ó–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è", "menu:tasks"),
    ("üèÜ –ë–∞–ª–ª—ã", "menu:score"),
    ("üßæ –ò—Å—Ç–æ—Ä–∏—è", "menu:history"),
    ("üß† –°–æ–≤–µ—Ç –¥–Ω—è (–ò–ò)", "menu:advice"),
    ("‚öôÔ∏è –ü–æ–º–æ—â—å", "menu:help"),
]


def build_menu_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for text, data in _MENU_BUTTONS:
        builder.button(text=text, callback_data=data)
    builder.adjust(1)
    return builder.as_markup()


async def render_menu_view(action: str, user: types.User | None) -> str:
    if action == "tasks":
        return tasks.build_tasks_overview()
    if action == "score" and user:
        return score.build_balance_text(user.id)
    if action == "history" and user:
        return score.build_history_text(user.id)
    if action == "advice":
        overview = tasks.build_tasks_overview()
        advisor = AIAdvisor()
        advice = await advisor.suggest_daily_focus(overview)
        return f"<b>{advice.title}</b>\n{advice.text}"
    if action == "help":
        cmds = [
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ</b>",
            "/tasks ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
            "/me ‚Äî –º–æ–∏ –±–∞–ª–ª—ã",
            "/history ‚Äî –∏—Å—Ç–æ—Ä–∏—è",
            "/myid ‚Äî –º–æ–π Telegram ID",
            "/selftest ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            "<b>–ê–¥–º–∏–Ω—ã</b>",
            "/family_list /family_add /family_remove",
            "/regen_today ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏",
            "/debug_jobs ‚Äî —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞",
        ]
        return "‚öôÔ∏è –ü–æ–º–æ—â—å:\n" + "\n".join(cmds)
    greeting = [
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞.",
        "–í—ã–±–∏—Ä–∞–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏, –±–∞–ª–∞–Ω—Å –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –ò–ò.",
    ]
    if user and user.id in settings.ADMIN_IDS:
        greeting.append("–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äî –≤ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–º—å—ë–π.")
    return "\n\n".join(greeting)


@router.message(Command("menu"))
async def show_menu(message: types.Message) -> None:
    await message.answer(await render_menu_view("home", message.from_user), reply_markup=build_menu_keyboard())


@router.callback_query(F.data.startswith("menu:"))
async def handle_menu_callback(callback: types.CallbackQuery) -> None:
    if callback.message is None:
        await callback.answer()
        return
    _, _, action = callback.data.partition(":")
    text = await render_menu_view(action or "home", callback.from_user)
    await callback.message.edit_text(text, reply_markup=build_menu_keyboard())
    await callback.answer()
